use crate::{ token::Token, lexer::LexicalError, ast::* };

grammar<'input>(input: &'input str);

pub Schema: Schema = {
  SchemaUnit*  => Schema::new(<>)
}

SchemaUnit: SchemaUnit = {
  Type => SchemaUnit::Type(<>),
  Condition => SchemaUnit::Condition(<>),
  <su: SchemaUnit> "\n" => su
}

Type: Type = {
  <l:@L> "type" <n:identifier> "{" <rops:IRelationOrPermissions> "}" <r:@R> => Type::new(n.to_string(), rops),
  <l:@L> "type" <n:identifier> "{" "}" <r:@R> => Type::new(n.to_string(), vec![]),
  <l:@L> "type" <n:identifier> <r:@R> => Type::new(n.to_string(), vec![]),
  // <l:@L> "condition" <n:identifier> "{" <expr:NodeExpr> "}" <r:@R> => Condition::new(n.to_string(), expr),
}

Condition: Condition = {
  // <l:@L> "condition" <name:identifier> "(" <args: ConditionArgs> ")" "{" <expr:ConditionExpression> "}" <r:@R> => { Condition {
  <l:@L> "condition" <name:identifier> "(" <args: ConditionArgs> ")" "{" "}" <r:@R> => {
    Condition {
      name: name.to_string(),
      args,
    }
  },
}

IRelationOrPermissions: Vec<RelationOrPermission> = {
  "\n"? <s1:IRelationOrPermission> <s2:("\n" IRelationOrPermission)*> "\n"? => {
    let mut rsss = vec![s1];
    rsss.extend(s2.into_iter().map(|e| e.1));
    rsss
  }
}

IRelationOrPermission: RelationOrPermission = {
  Relation => RelationOrPermission::Relation(<>),
  Permission => RelationOrPermission::Permission(<>),
}

Relation: Relation = {
  "relation" <n:identifier> ":" <rsss:RelationshipSets> => Relation {
    name: n.to_string(),
    subjects: rsss,
  },
}

RelationshipSets: Vec<RelationshipSet> = {
  <s1:RRelationshipSet> <s2:("|" RRelationshipSet)*> => {
    let mut rsss = vec![s1];
    rsss.extend(s2.into_iter().map(|e| e.1));
    rsss
  }
}

RRelationshipSet: RelationshipSet = {
  <n:identifier> => RelationshipSet::Single(n.to_string()),
  <n:identifier> "#" <r:identifier> => RelationshipSet::Set(n.to_string(), r.to_string())
}

Permission: Permission = {
  "permission" <n:identifier> ":" <expr: RelationshipExpr> => Permission {
    name: n.to_string(),
    permission: expr.compute(),
  },
}

RelationshipExpr: Relationship = {
  <l:RelationshipExpr> "+" <r:RelationshipFactor> => Relationship::Union {
    children: vec![Box::new(l), Box::new(r)]
  },
  <l:RelationshipExpr> "-" <r:RelationshipFactor> => Relationship::Difference {
    base: Box::new(l),
    subtract: Box::new(r)
  },
  RelationshipFactor,
}

RelationshipFactor: Relationship = {
  <l:RelationshipFactor> "&" <r:RelationshipSetTerm> => Relationship::Intersection {
    children: vec![Box::new(l), Box::new(r)]
  },
  RelationshipSetTerm,
}

RelationshipSetTerm: Relationship = {
  RRelationshipSet => Relationship::Set(<>),
  "(" <RelationshipExpr> ")"
}

ConditionArgs: Vec<ConditionArg> = {
  <s1:ConditionArg> <s2:("," ConditionArg)*> => {
    let mut rsss = vec![s1];
    rsss.extend(s2.into_iter().map(|e| e.1));
    rsss
  }
}

ConditionArg: ConditionArg = {
  <name:identifier> ":" <t:ConditionType> => ConditionArg {
    name: name.to_string(),
    r#type: t,
  }
}

ConditionType: ConditionType = {
  "int" => ConditionType::Int,
  "uint" => ConditionType::Uint,
  "double" => ConditionType::Double,
  "bool" => ConditionType::Bool,
  "bytes" => ConditionType::Bytes,
  "string" => ConditionType::String,
  "duration" => ConditionType::Duration,
  "timestamp" => ConditionType::Timestamp,
  "any" => ConditionType::Any,
  "list" "<" <t: ConditionType> ">" => ConditionType::List(Box::new(t)),
  "map" "<" <t: ConditionType> ">"  => ConditionType::Map(Box::new(t)),
  "ipaddress" => ConditionType::IPaddress,
}

// ConditionExpression: ConditionExpression = {

// }

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        identifier => Token::Identifier(<&'input str>),
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "type" => Token::Type,
        "relation" => Token::Relation,
        "permission" => Token::Permission,
        "cond" => Token::Cond,
        ":" => Token::Colon,
        "(" => Token::LBracket,
        ")" => Token::RBracket,
        "^" => Token::Caret,
        "&" => Token::And,
        "|" => Token::Or,
        "+" => Token::Add,
        "-" => Token::Sub,
        "->" => Token::YulArrow,
        "#" => Token::Sharp,
        "\n" => Token::Newline,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        "=" => Token::Eq,
        "!" => Token::ExclamationMark,
        ">" => Token::Gt,
        "<" => Token::Lt,
        "condition" => Token::Condition,
        "int" => Token::Int,
        "uint" => Token::Uint,
        "double" => Token::Double,
        "bool" => Token::Bool,
        "bytes" => Token::Bytes,
        "string" => Token::String,
        "duration" => Token::Duration,
        "timestamp" => Token::Timestamp,
        "any" => Token::Any,
        "list" => Token::List,
        "map" => Token::Map,
        "ipaddress" => Token::IPaddress,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        "=" => Token::Eq,
        "!" => Token::ExclamationMark,
        ">" => Token::Gt,
        "<" => Token::Lt,
        "condition" => Token::Condition,
    }
}
